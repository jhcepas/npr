#!/usr/bin/env python
import sys
import os
import time

# This avoids installing nprlib module. npr script will find it in the
# same directory in which it is
NPRPATH = os.path.split(os.path.realpath(__file__))[0]
sys.path.insert(0, NPRPATH)
import signal

from nprlib.argparse import ArgumentParser, RawDescriptionHelpFormatter
from nprlib import db
from nprlib.utils import print_as_table, read_time_file, sec2time
from nprlib.errors import DataError
from nprlib.logger import get_main_log

def color(color, string):
    color2code = {
        "header": '\033[95m',
        "blue": '\033[94m',
        "green": '\033[92m',
        "yellow": '\033[93m',
        "red": '\033[91m',
        "magenta": "\033[35m",
        "gray": "\033[37m",
        "orange": "\033[33m",
        "black": "\033[30m",
        "cyan": "\033[36m",
        "white": "\033[29m",
    }
    END = '\033[0m'
    return ''.join([color2code[color], string, END])


def change_status():
    print "** Modify task status. THIS IS A DANGEROUS OPTION!"
    tid = raw_input("taskid: ").strip()
    if len(tid) < 6:
        print "  Error: tid must contain at least the first 6 characters"
    else:
        report = db.report(None, 40)
        for entry in report:
            if entry[0].startswith(tid):
                stfile = os.path.join(args.nprdir[0], "tasks", entry[0], "__status__")
                print_as_table([entry])
                if entry[5] == "job":
                    current_status = open(stfile).read(1)
                    print "  Current status in __status__ file is: ", current_status
                status = raw_input("modify current state [%s] for: " %entry[4]).strip()
                if status not in set("DWRE"):
                    print "Error: status must be one of D,W,R,E"
                else:
                    if entry[5] == "job":
                        open(stfile, "w").write(status)
                    db.update_task(entry[0], status=status)
                    db.commit()
                    print "DONE!"
    raw_input("press enter to return to monitoring mode")


def top(waiting_time, dbfile):
    db.connect(dbfile)
    signal.signal(signal.SIGALRM, update_top)
    update_top(0, 0)

    while True:
        signal.alarm(waiting_time)
        try:
            cmd = raw_input(":")
            signal.alarm(0)
            if cmd == "m":
                change_status()
            if cmd == "m":
                change_status()

                
            update_top(0, 0)
        except EOFError:
            pass
          
def update_top(a1, a2):
    os.system("clear")
    print time.ctime()
    report = db.report(args.start_entry, args.entries)
    hd = ["id", "st", "type", "task", "program", "seqs", "outs", "elapsed", "start", "end"]
    mod_report = []
    for r in report:
        r = list(r)
        r[11] = 0 if r[11] == "None" else r[11]
        r[12] = 0 if r[12] == "None" else r[12]

        if not r[11] or not r[12]:
            try:
                start, end = read_time_file(os.path.join(args.nprdir[0], "tasks", r[0], "__time__"))
                r[11] = start
                r[12] = end if end else int(time.time())
                r[10] = r[12] - r[11]
            except Exception, e:
                pass
        if r[10]:
            r[10] = sec2time(r[10])
        r[0] = r[0][:6]
        r[10] = str(r[10])[:16]
        r[11] = time.ctime(r[11])[:10]
        r[12] = time.ctime(r[12])[:10]

        if args.colors:
            if r[4] == "E":
                r[4] = color("green", r[4])
            elif r[4] == "W":
                r[4] = color("yellow", r[4])
            elif r[4] == "R":
                r[4] = color("orange", r[4])
            elif r[4] == "D":
                r[4] = color("blue", r[4])
                
        mod_report.append(r)

    print_as_table(mod_report, fields=[0, 4, 5, 6, 7, 8, 9, 10, 11, 12], header=hd )

__DESCRIPTION__ = "Monitors NPR process execution."
        
if __name__ == "__main__":
    parser = ArgumentParser(description=__DESCRIPTION__, 
                            formatter_class=RawDescriptionHelpFormatter)
    # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    # action - The basic type of action to be taken when this argument is encountered at the command line. (store, store_const, store_true, store_false, append, append_const, version)
    # nargs - The number of command-line arguments that should be consumed. (N, ? (one or default), * (all 1 or more), + (more than 1) )
    # const - A constant value required by some action and nargs selections. 
    # default - The value produced if the argument is absent from the command line.
    # type - The type to which the command-line argument should be converted.
    # choices - A container of the allowable values for the argument.
    # required - Whether or not the command-line option may be omitted (optionals only).
    # help - A brief description of what the argument does.
    # metavar - A name for the argument in usage messages.
    # dest - The name of the attribute to be added to the object returned by parse_args().
   
    parser.add_argument("-t", "--schedule-time", dest="schedule_time", 
                        type=float, default=2,
                        help="""Schedule time in seconds. """)
  
    parser.add_argument('nprdir', metavar='npr_base_dir', type=str, nargs=1,
                   help='path to an NPR execution directory')

    parser.add_argument("-c", dest="colors", 
                        action="store_true", 
                        help="""Color interface""")

    parser.add_argument("-n", dest="entries", 
                        type=int, default=40,
                        help="""Number of entries (rows) to show.""")

    parser.add_argument("-s", dest="start_entry", 
                        type=int, default=-40,
                        help="""starting point to show DB entries.""")
  

    
  
    args = parser.parse_args()
    if not os.path.isdir(args.nprdir[0]):
        raise DataError("NPR dir [%s] not found." %args.nprdir[0])
    if not os.path.exists(os.path.join(args.nprdir[0], "db.sqlite3")):
        raise DataError("[%s] does not look an NPR directory ." %args.nprdir[0])
        
    dbfile = os.path.join(os.path.realpath(args.nprdir[0]), "db.sqlite3")
    log = get_main_log(sys.stderr)
    top(args.schedule_time, dbfile)