#!/usr/bin/env python
import os
import time
from nprlib.argparse import ArgumentParser, RawDescriptionHelpFormatter
from nprlib import db
from nprlib.utils import print_as_table

def top(waiting_time, dbfile):
    db.connect(dbfile)
    while True:
        os.system("clear")
        print time.ctime()
        dbnodes, dbtasks = db.report()
        #print_as_table(dbnodes)
        print_as_table(dbtasks, fields=[0,3,4,5,6])
        time.sleep(waiting_time)


__DESCRIPTION__ = ""
        
if __name__ == "__main__":
    parser = ArgumentParser(description=__DESCRIPTION__, 
                            formatter_class=RawDescriptionHelpFormatter)
    # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    # action - The basic type of action to be taken when this argument is encountered at the command line. (store, store_const, store_true, store_false, append, append_const, version)
    # nargs - The number of command-line arguments that should be consumed. (N, ? (one or default), * (all 1 or more), + (more than 1) )
    # const - A constant value required by some action and nargs selections. 
    # default - The value produced if the argument is absent from the command line.
    # type - The type to which the command-line argument should be converted.
    # choices - A container of the allowable values for the argument.
    # required - Whether or not the command-line option may be omitted (optionals only).
    # help - A brief description of what the argument does.
    # metavar - A name for the argument in usage messages.
    # dest - The name of the attribute to be added to the object returned by parse_args().

   
    parser.add_argument("-t", "--schedule-time", dest="schedule_time", 
                        type=float, default=1.5,
                        help="""Schedule time in seconds. """)

    parser.add_argument("-d", "--npr-dir", dest="nprdir", 
                        type=str, required=True, 
                        help="""Npr directory to monitor""")
   
  
    args = parser.parse_args()
    dbfile = os.path.join(os.path.realpath(args.nprdir), "db.sqlite3")
    top(args.schedule_time, dbfile)