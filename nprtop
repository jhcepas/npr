#!/usr/bin/env python
import sys
import os
import time
import shutil

# This avoids installing nprlib module. npr script will find it in the
# same directory in which it is
NPRPATH = os.path.split(os.path.realpath(__file__))[0]
sys.path.insert(0, NPRPATH)
import signal
from collections import defaultdict

from nprlib.argparse import ArgumentParser, RawDescriptionHelpFormatter
from nprlib import db
from nprlib.utils import (print_as_table, read_time_file, sec2time, Getch,
                          Tree, iter_prepostorder, pjoin, get_latest_nprdp)
from nprlib.errors import DataError
from nprlib.logger import get_main_log

subtype2color = {
    "tree": "green",
    "treemerger": "cyan",
    "alg": "red",
    "acleaner": "yellow",
    "concat_alg": "red", 
    "mchooser": "orange",
    "cog_selector": "blue", 
    "msf": "blue"
}
status2color = {
    "E": "green",
    "W": "yellow",
    "R": "orange",
    "D": "blue"
}

def color(color, string):
    if not args.colors:
        return string
        
    color2code = {
        "header": '\033[95m',
        "blue": '\033[94m',
        "green": '\033[92m',
        "yellow": '\033[93m',
        "red": '\033[91m',
        "magenta": "\033[35m",
        "gray": "\033[37m",
        "orange": "\033[33m",
        "black": "\033[30m",
        "cyan": "\033[36m",
        "white": "\033[29m",
    }
    END = '\033[0m'
    return ''.join([color2code[color], string, END])


def change_status():
    print "** Modify task status. THIS IS A DANGEROUS OPTION!"
    tid = raw_input("taskid: ").strip()
    if len(tid) < 6:
        print "  Error: tid must contain at least the first 6 characters"
    else:
        report = db.report(RUNIDS[CURRENT_RUNID])
       
        for entry in report:
            if entry[0].startswith(tid):
                stfile = os.path.join(args.nprdir[0], "tasks", entry[0], "__status__")
                print_as_table([entry])
                if entry[5] == "job":
                    current_status = open(stfile).read(1)
                    print "  Current status in __status__ file is: ", current_status
                status = raw_input("modify current state [%s] for: " %entry[4]).strip()
                if status not in set("DWRE"):
                    print "Error: status must be one of D,W,R,E"
                else:
                    if entry[5] == "job":
                        open(stfile, "w").write(status)
                    db.update_task(entry[0], status=status)
                    db.commit()
                    print "DONE!"
    raw_input("press enter to return to monitoring mode")


def top(waiting_time, dbfile):
    global CURRENT_RUNID
    db.connect_nprdb(dbfile)
    signal.signal(signal.SIGALRM, update_top)
    max_entries = update_top(0, 0)

    while True:
        signal.alarm(waiting_time)
        try:
            print ":",
            cmd = Getch().__call__()
            signal.alarm(0)
            if cmd == "q":
                sys.exit(0)
            elif cmd == "m":
                print "(M)odify entry"
                change_status()
            elif cmd == "n":
                args.start_entry = min(args.start_entry + args.entries, max(0, max_entries - args.entries))
            elif cmd == "p":
                args.start_entry = max(0, args.start_entry - args.entries)
            elif cmd == "f":
                print "apply (F)ilter"
                valid_colums =  set(["taskid", "nodeid", "parentid", "cladeid", "status", "type", "subtype", "name", "target_size", "out_size", "tm_start", "tm_end"])
                valid_cond =  set(["==", "IN", "!=", ">=", "<=", "<", ">"])
                col_name, cond, value = None, None, None
                print "** Valid colums:", ", ".join(valid_colums)
                while col_name not in valid_colums:
                    col_name = raw_input("Column: ")
                print "** Valid conditions: ", ", ".join(valid_cond)                    
                while cond not in valid_cond: 
                    cond =  raw_input("Condition: ").strip().lower()
                value =  '"%s"' %raw_input("Value: ").strip()
                FILTERS[col_name] = " ".join([col_name, cond, value])
            elif cmd == "+":
                CURRENT_RUNID = min(len(RUNIDS)-1, CURRENT_RUNID+1)
            elif cmd == "-":
                CURRENT_RUNID = max(0, CURRENT_RUNID-1)
                            
            max_entries = update_top(0, 0)
            print max_entries
        except EOFError:
            pass
          
def update_top(a1, a2):
    short_date = lambda secs: time.strftime("%d %b %y, %H:%M", time.gmtime(secs))
    os.system("clear")
    runid_name = RUNID_NAME.get(RUNIDS[CURRENT_RUNID], RUNIDS[CURRENT_RUNID])
    print "NPR execution ID:", color("magenta", runid_name), "started:", color("yellow", runid_date)
    print "Current time:", time.ctime()
    print "Showing %s-%s records" %(args.start_entry, args.start_entry + args.entries)
    report = db.report(RUNIDS[CURRENT_RUNID], FILTERS.values())
    hd = ["t.id", "st", "t.type", "t.subtype", "t.name", "size", "outs", "ex.time", "start", "end"]
    mod_report = []
    report.sort(key=lambda x: x[8])

    for r in report[args.start_entry:args.start_entry + args.entries]:
        r = list(r)
        r[11] = 0 if r[11] == "None" else r[11]
        r[12] = 0 if r[12] == "None" else r[12]
        if 1 or not r[11] or not r[12]:
            try:
                start, end = read_time_file(os.path.join(args.nprdir[0], "tasks", r[0], "__time__"))
                r[11] = start
                r[12] = end if end else int(time.time())
                r[10] = r[12] - r[11]
            except Exception, e:
                pass
        if r[10]:
            r[10] = sec2time(r[10])
        r[0] = r[0][:6]
        r[10] = str(r[10])[:16]
                
        r[11] = short_date(r[11])
        r[12] = short_date(r[12])

        r[4] = color(status2color.get(r[4],"white"), r[4])
        r[6] = color(subtype2color.get(r[6],"white"), r[6])
            
        mod_report.append(r)

    print_as_table(mod_report, fields=[0, 4, 5, 6, 7, 8, 9, 10, 11, 12], header=hd )
    return len(report)
__DESCRIPTION__ = "Display NPR tasks"
        
if __name__ == "__main__":
    parser = ArgumentParser(description=__DESCRIPTION__, 
                            formatter_class=RawDescriptionHelpFormatter)
   
    parser.add_argument("-t", "--schedule-time", dest="schedule_time", 
                        type=int, default=5,
                        help="""Refresh time in seconds. """)
  
    parser.add_argument('nprdir', metavar='npr_base_dir', type=str, nargs=1,
                   help='Path to an NPR execution directory')

    parser.add_argument("-C", dest="colors", 
                        action="store_false", 
                        help="""Disable colors""")

    parser.add_argument("-n", dest="entries", 
                        type=int, default=40,
                        help="""Number of entries (rows) to show.""")

    parser.add_argument("-s", dest="start_entry", 
                        type=int, default=0,
                        help="""starting entry.""")

    parser.add_argument("-f", dest="filter_states", 
                        type=set, default=set(),
                        help="""Filter out entries whose state is in filter_states""")
    
    parser.add_argument("-i", dest="runid", 
                        type=str, nargs="+",
                        help="""Specifies what execution thread id to show. "
                        "Last execution id is used by default.""")
  
    args = parser.parse_args()
    if not os.path.isdir(args.nprdir[0]):
        raise DataError("NPR dir [%s] not found." %args.nprdir[0])
    
    nprdir = pjoin(os.path.realpath(args.nprdir[0]))
    last_db = get_latest_nprdp(nprdir)
    if not last_db or not os.path.exists(last_db):
        raise ConfigError("[%s] does not contain NPR data." %last_db)
    shutil.copy(last_db, last_db+".nprtop.tmp")
    dbfile = pjoin(nprdir, last_db+".nprtop.tmp")
    
    log = get_main_log(sys.stderr)

    RUNID_NAME = {}
    if not args.runid:
        RUNIDS = set()
        for fname in os.listdir(nprdir):
            runid_file = pjoin(nprdir, fname, "runid")
            if os.path.exists(runid_file):
                runid, runid_date = open(runid_file, "rU").readlines()[-1].split("\t")
                RUNIDS.add(runid)
                RUNID_NAME[runid] = fname
    else:
        RUNIDS = set(args.runid)
        runid_date = "?"

    RUNIDS = list(RUNIDS)
    CURRENT_RUNID = 0
        
    if args.filter_states:
        FILTERS = {"status": "status IN (%s)" %",".join(map(lambda x: '"%s"'%x, args.filter_states))}
    else:
        FILTERS = {}
    top(args.schedule_time, dbfile)
