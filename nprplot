#!/usr/bin/env python
import os
import time
import sys
from glob import glob
import logging
log = logging

# This avoids installing nprlib module. npr script will find it in the
# same directory in which it is
NPRPATH = os.path.split(os.path.realpath(__file__))[0]
sys.path.insert(0, NPRPATH)
from nprlib.argparse import ArgumentParser, RawDescriptionHelpFormatter
from nprlib.errors import DataError
from nprlib.utils import (PhyloTree, TreeStyle, NodeStyle, faces,
                          random_color, md5, get_node2content)

__DESCRIPTION__ = ("Render tree snapshot images and creates a tree"
                   " growing animation")

def layout(node):
    if getattr(node, "tree_model", None):
        node.img_style["fgcolor"] = "red"
        node.img_style["size"] = 30
    else:
        node.img_style["size"] = 0

    if getattr(node, "_bgcolor", None):
        node.img_style["bgcolor"] = node._bgcolor
       
        
    if node.is_leaf():
        faces.add_face_to_node(faces.AttrFace("name", fsize=40),
                               node, column=0, position="aligned")

        
def plot(args):
    trees_dir = os.path.join(args.nprdir[0], "tree_snapshots")
    imgs_dir =  os.path.join(args.nprdir[0], "gallery")

    node2children = {}
    for fname in sorted(glob(trees_dir+"/Iter*.nw")):
        basename = os.path.split(fname)[1]
        #if not basename.startswith("Iter_00030"):
        #    continue
            
        t = PhyloTree(fname)
        ts = TreeStyle()
        ts.legend.add_face(faces.TextFace(basename, fsize=260), 0)
        ts.layout_fn = layout
        ts.mode = "c"
        ts.scale = t.get_farthest_leaf()[1] * 700.0

        t.sort_descendants()
       
        node2content = get_node2content(t)
        for n in t.traverse():
            if getattr(n, "tree_type", None):
                if n.cladeid not in node2children:
                    topology = node2content[n]
                    topology_ch0 = node2content[n.children[0]]
                    topology_ch1 = node2content[n.children[1]]
                    parent_id = n.up.cladeid if n.up else None
                    if topology not in node2children.get(parent_id,[set()])[0]:
                        n._bgcolor = random_color(s=0.8)
                    else:
                        n._bgcolor =  node2children[parent_id][1]
                    node2children[n.cladeid] = (set([topology_ch0,
                                                     topology_ch1]),
                                                n._bgcolor)

                    font_size = ts.scale /216
                    print ts.scale, font_size
                    ts.legend.add_face(faces.TextFace(n.alg_type, fsize=260), 0)

                    ts.legend.add_face(faces.TextFace(n.tree_type, fsize=260), 0)
                    ts.legend.add_face(faces.TextFace(str(len(topology)), fsize=260), 0)
                else:
                    n._bgcolor =  node2children[n.cladeid][1]


        log.error("plotting %s", basename)


        
        t.render(os.path.join(imgs_dir, basename+".png"),
                 h=800,w=800, tree_style = ts)


    cmd = """
    mencoder mf://%s/*.png -mf w=800:h=800:fps=2:type=png -ovc copy -oac copy -o %s/npr.avi;
    """ %(imgs_dir, imgs_dir)
    os.system(cmd)
    
    """
mencoder %s/npr.avi \
-o testvid.flv -of lavf \
-oac mp3lame -lameopts abr:br=64 -srate 22050 -ovc lavc \
-lavcopts vcodec=flv:keyint=50:vbitrate=300:mbd=2:mv0:trell:v4mv:cbp:last_pred=3 -vf scale "320:240";
   
   
    os.system(cmd)
"""
        
if __name__ == "__main__":
    parser = ArgumentParser(description=__DESCRIPTION__, 
                            formatter_class=RawDescriptionHelpFormatter)
    # name or flags - Either a name or a list of option strings, e.g. foo or -f, --foo.
    # action - The basic type of action to be taken when this argument is encountered at the command line. (store, store_const, store_true, store_false, append, append_const, version)
    # nargs - The number of command-line arguments that should be consumed. (N, ? (one or default), * (all 1 or more), + (more than 1) )
    # const - A constant value required by some action and nargs selections. 
    # default - The value produced if the argument is absent from the command line.
    # type - The type to which the command-line argument should be converted.
    # choices - A container of the allowable values for the argument.
    # required - Whether or not the command-line option may be omitted (optionals only).
    # help - A brief description of what the argument does.
    # metavar - A name for the argument in usage messages.
    # dest - The name of the attribute to be added to the object returned by parse_args().
   
    parser.add_argument('nprdir', metavar='N', type=str, nargs=1,
                   help='path to an NPR execution directory')
       
  
    args = parser.parse_args()
    if not os.path.isdir(args.nprdir[0]):
        raise DataError("NPR dir [%s] not found." %args.nprdir[0])
    if not os.path.exists(os.path.join(args.nprdir[0], "db.sqlite3")):
        raise DataError("[%s] does not look an NPR directory ." %args.nprdir[0])
        

    plot(args)




    