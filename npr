#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import errno
import __builtin__
def wrap(method, retries):
    def fn(*args, **kwargs):
        for i in xrange(retries):
            try:
                return method(*args, **kwargs)
            except IOError, e:            
                if e.errno == errno.EINTR:
                    print >>sys.stderr, "A system call interruption was captured"
                    print >>sys.stderr, "Retrying", i, "of", retries, "until exception is raised"
                    continue
                else:
                    raise
    fn.retries = retries
    return fn

class safefile(file):
    __retries = 2
    def read(self, *args, **kargs):
        for i in xrange(self.__retries):
            try:
                return file.read(self, *args, **kargs)
            except IOError, e:            
                if e.errno == errno.EINTR:
                    print >>sys.stderr, "A system call interruption was captured"
                    print >>sys.stderr, "Retrying", i, "of", self.__retries, "until exception is raised"
                    continue
                else:
                    raise
    def write(self, *args, **kargs):
        for i in xrange(self.__retries):
            try:
                return file.read(self, *args, **kargs)
            except IOError, e:            
                if e.errno == errno.EINTR:
                    print >>sys.stderr, "A system call interruption was captured"
                    print >>sys.stderr, "Retrying", i, "of", self.__retries, "until exception is raised"
                    continue
                else:
                    raise
                
__builtin__.file = safefile
__builtin__.raw_input = wrap(raw_input, 100)
 
import sys
import os
import shutil
from StringIO import StringIO
from collections import defaultdict
import filecmp
import logging
import tempfile
log = None
import numpy
from time import ctime, time
# This avoids installing nprlib module. npr script will find it in the
# same directory in which it is
NPRPATH = os.path.split(os.path.realpath(__file__))[0]
sys.path.insert(0, NPRPATH)

from nprlib import argparse
from nprlib.configobj import ConfigObj, flatten_errors
from nprlib import validate
from nprlib.utils import (strip, tobool, SeqGroup, generate_runid,  AA, NT,
                          GLOBALS, encode_seqname, pjoin, pexist,
                          hascontent, clear_tempdir, ETE_CITE)
from nprlib.errors import ConfigError, DataError
from nprlib.master_task import Task
from nprlib.interface import app_wrapper
from nprlib.scheduler import schedule
from nprlib import db
from nprlib import apps
from nprlib.template.common import CONFIG_SPECS
from nprlib.logger import logindent
from nprlib.citation import Citator

APPSPATH =  pjoin(NPRPATH, "ext_apps/")

try:
    module_path = os.path.split(__file__)[0]
    __VERSION__ = open(os.path.join(module_path, "VERSION")).read().strip()
except:
    __VERSION__ = "unknown"

try:
    module_path = os.path.split(__file__)[0]
    __DATE__ = open(os.path.join(module_path, "DATE")).read().strip()
except:
    __DATE__ = "unknown"

__DESCRIPTION__ = (
"""--------------------------------------------------------------------------------
            Nested Phylogenetic Reconstruction (NPR) program.
                     ETE-NPR %s (beta), %s.
    
      ETE-NPR is a Python application that encapsulates all necessary software
      and methods to reconstruct phylogenetic trees starting from a single FASTA
      file. It provides a convenient interface, based on a single configuration
      file, in which complex phylogenetic workflows can be defined in a few
      lines.

      In addition, ETE-NPR implements the Nested Phylogenetic Reconstruction
      (NPR) algorithm, by which nodes in a phylogenetic tree can be
      hierarchically revisited through several iterations in order to maximize
      their resolution.

      If you use this program in a published work, please cite:

        - Jaime Huerta-Cepas and Toni Gabaldon. ETE-NPR: a python application for
          nested phylogenetic reconstruction and workflow design. XXX-XX.

      If you also use the NPR methodology, please cite:

        - 

      (Note that a list of the external programs used to complete the necessary
      computations will be shown shown together with your results.)

           Contact: jhuerta [at] crg.es & tgabaldon [at] crg.es
--------------------------------------------------------------------------------

    """ %(__VERSION__, __DATE__))

def existing_file(value):
    if os.path.isfile(value):
        return value
    else:
        raise ConfigError("Not valid file")

def existing_dir(value):
    if os.path.isdir(value):
        return value
    else:
        raise ConfigError("Not valid file")

def check_number(value, cast, minv=0, maxv=None):
    try:
        typed_value = cast(value)
    except ValueError:
        raise ConfigError("Expected [%s] number. Found [%s]" %(cast, value))
    else:
        if (minv is not None and typed_value < cast(minv)) or \
           (maxv is not None and typed_value > cast(maxv)):
            _minv = minv if minv is not None else "any"
            _maxv = maxv if maxv is not None else "any"
            raise ConfigError("[%s] not in the range (%s,%s)" %
                              (value, _minv, _maxv))
    return typed_value

def is_float(value, minv=None, maxv=None):
    return check_number(value, float, minv, maxv)

def is_integer(value, minv=None, maxv=None):
    return check_number(value, int, minv, maxv)

def is_list(value):
    if not isinstance(value, list):
        raise ConfigError("Expected a list of values. Found [%s]" %value)
    return value

def is_set(value):
    if not isinstance(value, list):
        raise ConfigError("Expected a list of values. Found [%s]" %value)
    return set(value)

def is_boolean_list(value):
    is_list(value)
    typed_value = []
    for v in value:
        typed_value.append(check_number(v, tobool, 0, 1))
    return typed_value

def is_float_list(value, minv=0, maxv=None):
    is_list(value)
    typed_value = []
    for v in value:
        typed_value.append(check_number(v, float, minv, maxv))
    return typed_value

def is_integer_list(value, minv=0, maxv=None):
    is_list(value)
    typed_value = []
    for v in value:
        typed_value.append(check_number(v, int, minv, maxv))
    return typed_value

def is_correlative_integer_list(value, minv=1, maxv=None):
    is_list(value)
    typed_value = []
    last_value = 0
    for v in value:
        typed_value.append(check_number(v, int, minv, maxv))
        if int(v) <= last_value:
            raise ConfigError("Numeric values are not correlative: %s" %value)
        last_value = int(v)
    return typed_value

def main(args):
    global log
    log = logging.getLogger("main")
    base_dir = GLOBALS["basedir"]
    db_dir = GLOBALS.get("dbdir", base_dir)
    print __DESCRIPTION__
    log.log(28, "Starting NPR execution at %s" %(ctime()))
    log.log(28, "Output directory %s" %(GLOBALS["output_dir"]))
    npr_template = args.workflow
    if npr_template == "supermatrix":
        GLOBALS["template"] = "supermatrix"
        from nprlib.template.supermatrix import pipeline
    elif npr_template == "genetree":
        GLOBALS["template"] = "genetree"
        from nprlib.template.genetree import pipeline
    else:
        raise ConfigError("Bad config file. A template name or file should be specified.")
    
    if args.arch == "auto":
        arch = "64 " if sys.maxsize > 2**32 else "32"
    else:
        arch = args.arch
       

    # Check and load all configuration files
    run2config = {}
    for fname in args.configfile:
        clearname = os.path.basename(fname)
        local_conf_file = pjoin(base_dir, clearname, "workflow.cfg")
        if pexist(base_dir):
            if hascontent(local_conf_file):
                if not filecmp.cmp(fname, local_conf_file):
                    if not args.override:
                        raise ConfigError("Output directory seem to contain"
                                      " a NPR execution using a different"
                                      " config file [workflow.cfg]. Use"
                                      " --override option or change the"
                                      " output path.")

        try:
            config = ConfigObj(fname, list_values=True,
                               configspec=StringIO(CONFIG_SPECS))
        except Exception, e:
            raise ConfigError(str(e))

        custom_types = {"boolean_list": is_boolean_list,
                        "integer_list": is_integer_list,
                        "correlative_integer_list": is_correlative_integer_list,
                        "float_list": is_float_list,
                        "float": is_float,
                        "integer": is_integer,
                        "list": is_list,
                        "set": is_set,
                        }
        val = validate.Validator(custom_types)
        check = config.validate(val)
        if not check:
            print flatten_errors(config, check)
            raise ConfigError("Errors found when parsing config file")

        # Check that fields are filled for all max_seq values
        for flow_name in ["supermatrix", "genetree"]:
            npr_config = [len(v) for k, v in config[flow_name].iteritems()
                          if type(v) == list and k != "target_levels"]
            if len(set(npr_config)) != 1:
                print '\n'.join([str((len(v),v)) for k, v in config[flow_name].iteritems()
                          if type(v) == list])
                raise ConfigError("Unequal length of main NPR config table. Missing comma?")

        # setup portable apps
        apps_to_test = {}
        for k,v in config["app"].iteritems():
            if k in config["threading"]:
                core_limit = int(config["threading"][k])
                config["threading"][k] = min(core_limit, args.maxcores)
               
            if v == "built-in":
                cores = int(config["threading"].get(k, args.maxcores))
                #cores = min(args.maxcores, cores)
                config["threading"][k] = cores
                if args.sge_execute:
                    _apps_path = os.path.realpath(config["sge"]["remote_npr_path"])
                    cmd = apps.get_call(k, _apps_path, base_dir, cores)
                    config["app"][k] = cmd
                    apps_to_test[k] = cmd
                else:
                    cmd = apps.get_call(k, APPSPATH, base_dir, str(cores))
                    config["app"][k] = cmd
                    apps_to_test[k] = cmd

        # Copy config file
        config["_outpath"] = pjoin(base_dir, clearname)
        try:
            os.makedirs(config["_outpath"])
        except OSError:
            pass
        open(local_conf_file, "w").write(open(fname).read())

        # save checksum of current workflow (traking checksum of config file. deprecated)
        #config["_config_checksum"] = checksum(local_conf_file)
        run2config[clearname] = config
            
    # Set up paths    
    gallery_dir = os.path.join(base_dir, "gallery")
    sge_dir = pjoin(base_dir, "sge_jobs")
    tmp_dir = pjoin(base_dir, "tmp")
    tasks_dir = pjoin(base_dir, "tasks")
    input_dir = pjoin(base_dir, "input")
    GLOBALS["sge_dir"] = sge_dir
    GLOBALS["tmp"] = tmp_dir
    GLOBALS["gallery_dir"] = gallery_dir
    GLOBALS["tasks_dir"] = tasks_dir
    GLOBALS["input_dir"] = input_dir
    
    GLOBALS["nprdb_file"]  = pjoin(db_dir, "npr.db")
    GLOBALS["datadb_file"]  = pjoin(db_dir, "data.db")
    GLOBALS["orthodb_file"]  = pjoin(db_dir, "ortho.db") if not args.orthodb else args.orthodb
    GLOBALS["seqdb_file"]  = pjoin(db_dir, "seq.db") if not args.seqdb else args.seqdb
    
    # Clear databases if necessary
    if args.clearall:
        log.log(28, "Erasing all existing npr data...")
        shutil.rmtree(GLOBALS["tasks_dir"]) if pexist(GLOBALS["tasks_dir"]) else None
        shutil.rmtree(GLOBALS["tmp"]) if pexist(GLOBALS["tmp"]) else None
        shutil.rmtree(GLOBALS["input_dir"]) if pexist(GLOBALS["input_dir"]) else None
        if not args.seqdb and pexist(GLOBALS["seqdb_file"]):
            os.remove(GLOBALS["seqdb_file"])
        if not args.orthodb and pexist(GLOBALS["orthodb_file"]):
            os.remove(GLOBALS["orthodb_file"])
        os.remove(GLOBALS["datadb_file"]) if pexist(GLOBALS["datadb_file"]) else None
    else:
        if args.softclear:
            log.log(28, "Erasing precomputed data (reusing task directory)")
            shutil.rmtree(GLOBALS["tmp"]) if pexist(GLOBALS["tmp"]) else None
            shutil.rmtree(GLOBALS["input_dir"]) if pexist(GLOBALS["input_dir"]) else None
            os.remove(GLOBALS["datadb_file"]) if pexist(GLOBALS["datadb_file"]) else None
        if args.clearseqs and pexist(GLOBALS["seqdb_file"]) and not args.seqdb:
            log.log(28, "Erasing existing sequence database...")
            os.remove(GLOBALS["seqdb_file"])
        if args.clearorthology and pexist(GLOBALS["orthodb_file"]) and not args.orthodb:
            log.log(28, "Erasing existing orthologs database...")
            os.remove(GLOBALS["orthodb_file"])
    
    if not args.clearall:
        if base_dir != GLOBALS["output_dir"] or db_dir != GLOBALS["output_dir"]:
            log.log(20, "Copying previous npr files to temp folder %s..." %db_dir)
            try: shutil.copy(pjoin(GLOBALS["output_dir"], "data.db"), base_dir)
            except IOError: pass
            try: shutil.copy(pjoin(GLOBALS["output_dir"], "seq.db"), base_dir)
            except IOError: pass
            try: shutil.copy(pjoin(GLOBALS["output_dir"], "ortho.db"), base_dir)
            except IOError: pass
            try: shutil.copy(pjoin(GLOBALS["output_dir"], "nprdata.tar.gz"), base_dir)
            except IOError: pass
            
            # try: os.system("cp -a %s/* %s/" %(GLOBALS["output_dir"],  base_dir))
            # except Exception: pass

    # UnCompress packed execution data
    if pexist(os.path.join(base_dir,"nprdata.tar.gz")):
        log.warning("Compressed data found. Extracting content to start execution...")
        cmd = "cd %s && tar -zxf nprdata.tar.gz && rm nprdata.tar.gz" % base_dir
        os.system(cmd)
            
    # Create dir structure
    for dirname in [tmp_dir, tasks_dir, input_dir]:
        try:
            os.makedirs(dirname)
        except OSError:
            log.warning("Using existing dir: %s", dirname)
            
    if not args.nochecks:
        log.log(28, "Testing x86-%s portable applications..." % arch)
        apps.test_apps(apps_to_test)
    
    # Set number of CPUs available
    GLOBALS["_max_cores"] = args.maxcores
    log.debug("Enabling %d CPU cores" %args.maxcores)
            
    
    # if npr_template == "supermatrix" and not args.ortho_pairs:
    #     raise ConfigError("Species tree workflow requires a list"
    #                       " of orthologous gene/protein pairs to be"
    #                       " supplied through the --ortho-pair"
    #                       " argument.")
    
    if npr_template == "supermatrix" and not args.cogs_file:
        raise ConfigError("Species tree workflow requires a list of COGS"
                          " to be supplied through the --cogs"
                          " argument.")
    elif npr_template == "supermatrix":
        GLOBALS["cogs_file"] = os.path.abspath(args.cogs_file)
        
    GLOBALS["seqtypes"] = set()
    if args.nt_seed_file:
        GLOBALS["seqtypes"].add("nt")
        GLOBALS["inputname"] = os.path.split(args.nt_seed_file)[-1]
        
    if args.aa_seed_file:
        GLOBALS["seqtypes"].add("aa")
        GLOBALS["inputname"] = os.path.split(args.aa_seed_file)[-1]

        
    # Initialize db if necessary, otherwise extract basic info
    db.init_nprdb(GLOBALS["nprdb_file"])
    db.init_datadb(GLOBALS["datadb_file"])
    
    # Check and load data
    ERROR = ""
    if not pexist(GLOBALS["seqdb_file"]):
        target_seqs = None
        target_seqs, seqnames, name2len, name2unk, name2seq = scan_sequences(args, target_seqs)
        ERROR = check_seq_integrity(args, target_seqs, seqnames, name2len, name2unk, name2seq)
        sp2counter = defaultdict(int)
        if npr_template == "supermatrix":
            for name in target_seqs:
                spname = name.split(GLOBALS["spname_delimiter"], 1)[0]
                sp2counter[spname] += 1
                #seq_species = set([name.split(GLOBALS["spname_delimiter"])[0] 
                #               for name in target_seqs])
            seq_species = set(sp2counter.keys())
        if not ERROR:
            db.init_seqdb(GLOBALS["seqdb_file"])
            if npr_template == "supermatrix":
                db.add_seq_species(sp2counter)
            load_sequences(target_seqs, name2seq, npr_template)
        seqnames, name2len, name2unk, name2seq = [None] * 4 # Release mem?
    else:
        db.init_seqdb(GLOBALS["seqdb_file"])
        log.warning("Skipping check and load sequences (loading from database...)")
        target_seqs = db.get_all_seq_names()
        
    log.warning("%d sequences in database" %len(target_seqs))

    if ERROR:
        open(pjoin(base_dir, "error.log"), "w").write(' '.join(sys.argv) + "\n\n" + ERROR)
        raise DataError("Errors were found while loading data. Please"
                        " check error file for details")
    
    if npr_template == "supermatrix":
        if not pexist(GLOBALS["orthodb_file"]):
             db.init_orthodb(GLOBALS["orthodb_file"])            
        #     check_and_load_orthologs(args.ortho_pairs)
        #     log.log(28, "Updating species info in ortholog-pairs")
        #     db.update_species_in_ortho_pairs()
        #     db.orthoconn.commit()
             all_species = set()
             for line in open(args.cogs_file):
                 all_species.update(map(lambda n: n.split(args.spname_delimiter, 1)[0].strip(), line.split("\t")))
             db.update_cog_species(all_species)
             db.orthoconn.commit()
        else:
            db.init_orthodb(GLOBALS["orthodb_file"])
            log.warning("Skipping check and load ortholog pairs (loading from database...)")
        
        # species in ortho pairs
        ortho_species = db.get_ortho_species()
        log.log(28, "Found %d unqiue species codes in ortholog-pairs" %(len(ortho_species)))
        # species in fasta file
        seq_species = db.get_seq_species()
        log.log(28, "Found %d unqiue species codes in sequence names" %(len(seq_species))) 
        
        # Species filter
        if args.spfile:
            target_species = set([line.strip() for line in open(args.spfile)])
            target_species.discard("")
            log.log(28, "Enabling NPR for %d species", len(target_species))
        else: 
            target_species = seq_species

        # Check that orthologs are available for all species
        if target_species - seq_species: 
            ERROR += "The following species have no sequence information: %s" %(target_species - seq_species)
        if target_species - ortho_species: 
            ERROR += "The following species have no orthology information: %s" %(target_species - ortho_species)
            
        GLOBALS["target_species"] = target_species
        
    if ERROR:
        open(pjoin(base_dir, "error.log"), "w").write(' '.join(sys.argv) + "\n\n" + ERROR)
        raise DataError("Errors were found while loading data. Please"
                        " check error file for details")

    # Prepare target taxa levels, if any
    if npr_template == "supermatrix" and args.lineages_file and config["supermatrix"].get("target_levels", None):
        sp2lin = {}
        lin2sp = defaultdict(set)
        all_sorted_levels = []
        for line in open(args.lineages_file):
            sp, lineage = line.split("\t")
            sp = sp.strip()
            if sp in target_species:
                sp2lin[sp] = map(lambda x: x.strip().lower(), lineage.split(","))
                for lin in sp2lin[sp]:
                    if lin not in lin2sp:
                        all_sorted_levels.append(lin)
                    lin2sp[lin].add(sp)
        # any target species without lineage information?
        if target_species - set(sp2lin):
            missing = target_species - set(sp2lin)
            log.warning("%d species not found in lineages file" %len(missing))
            
        # So, the following levels (with at least 2 species) could be optimized     
        avail_levels = [(lin, len(lin2sp[lin])) for lin in all_sorted_levels if len(lin2sp[lin])>=2]
        log.log(26, "Available levels for NPR optimization:\n%s", '\n'.join(map(lambda x: "% 30s (%d spcs)"%x, avail_levels)))
        avail_levels = set([lv[0] for lv in avail_levels])
        
        # Let's prepare the dictionary with the target levels
        GLOBALS["optimized_levels"] = {}
        for target_level in config["supermatrix"]["target_levels"]:

            # If target level name starts with ~, we allow para and
            # poly-phyletic grouping of the species in such level
            strict_monophyly = True
            if target_level.startswith("~"):
                target_level = target_level.lstrip("~")
                strict_monophyly = False
            
            target_level = target_level.lower()
            if target_level in avail_levels:
                GLOBALS["optimized_levels"][target_level] = [False, strict_monophyly]
            else:
                raise ConfigError("Target level not found in the species lineage file: %s" %target_level)
            
        log.log(26, "Target levels:\n%s" %
                '\n'.join(map(lambda x: "% 30s (%s spcs)**" %(x, len(lin2sp[x])),
                              GLOBALS["optimized_levels"].keys())))
        GLOBALS["lineages"] = (sp2lin, lin2sp)
    # if we miss lineages file, raise an error
    elif npr_template == "supermatrix" and config["supermatrix"].get("target_levels", None):
        raise ConfigError("The use of target_levels requires a species lineage file provided through the --lineages option")
        
    target_seqs = None # release mem

    if npr_template == "genetree":
        if "aa" in GLOBALS["seqtypes"]:
            GLOBALS["target_sequences"] = db.get_all_seqids("aa")
        else:
            GLOBALS["target_sequences"] = db.get_all_seqids("nt")
        log.log(28, "Working on %d ids whose sequences are available", len(GLOBALS["target_sequences"]))
        
    # how task will be executed
    if args.execute:
        if args.monitor:
            execution =("insitu", True) # True is for run-detached flag
        else:
            execution = ("insitu", False)

    elif args.sge_execute:
        execution = ("sge", False)
    else:
        execution = (None, False)
       
    # Scheduling starts here
    log.log(28, "NPR starts now!")
    
    # This initialises all pipelines
    pending_tasks = []
    start_time = ctime()
    for name, config in run2config.iteritems():
        # Feeds pending task with the first task of the workflow
        config["_name"] = name
        new_tasks = pipeline(None, config)
        thread_id = new_tasks[0].threadid
        config["_configid"] = thread_id
        GLOBALS[thread_id] = config
        pending_tasks.extend(new_tasks)

        # Clear info from previous runs
        open(os.path.join(config["_outpath"], "runid"), "a").write('\t'.join([thread_id, GLOBALS["nprdb_file"]+"\n"]))
        # Write command line info
        cmd_info = '\t'.join([start_time, thread_id, str(args.monitor), GLOBALS["cmdline"]])
        open(pjoin(config["_outpath"], "command_lines"), "a").write(cmd_info+"\n")

    thread_errors = schedule(pipeline, pending_tasks, args.schedule_time,
                             execution, args.retry_error_jobs, args.debug)
    db.close()
    
    if not thread_errors:
        if args.compress:
            log.log(20, "Compressing intermediate data...")
            cmd = "cd %s && tar --remove-files -zcf nprdata.tar.gz data.db input/ tmp/ tasks/ seq.db; gzip -f npr.log" %\
              GLOBALS["basedir"]
            os.system(cmd)
        log.log(20, "Deleting temporal data...")
        cmd = "cd %s && rm tmp/ -rf" %GLOBALS["basedir"]
        os.system(cmd)
        GLOBALS["citator"].show()
    else:
        raise DataError("Errors found in some tasks")
        
def check_and_load_orthologs(fname):
    log.log(28, "importing orthologous pairs into database (this may take a while)...")
    template_import = tempfile.NamedTemporaryFile()
    template_import.write('''
PRAGMA cache_size = 1000000;
PRAGMA synchronous = OFF;
PRAGMA journal_mode = OFF;
PRAGMA locking_mode = EXCLUSIVE;
PRAGMA temp_store = MEMORY;
PRAGMA auto_vacuum = NONE;
.separator "\\t"
.import %s ortho_pair
PRAGMA locking_mode = EXCLUSIVE;

CREATE INDEX IF NOT EXISTS i7 ON ortho_pair (taxid2, seqid2, taxid1);
CREATE INDEX IF NOT EXISTS i10 ON ortho_pair (taxid1, taxid2);

PRAGMA synchronous = NORMAL;
PRAGMA journal_mode = DELETE;
PRAGMA locking_mode = NORMAL;

''' %  fname)

    template_import.flush()
    cmd = "sqlite3 %s < %s" %(GLOBALS["orthodb_file"], template_import.name)
    print cmd
    os.system(cmd)
    template_import.close()
    

def load_sequences(target_seqs, name2seq, npr_template):
    if args.seq_rename:
        name2hash, hash2name = hash_names(target_seqs)
        log.log(28, "Loading %d sequence name translations..." %len(hash2name))
        db.add_seq_name_table(hash2name.items())
        if npr_template == "genetree":
            GLOBALS["target_sequences"] = hash2name.keys()
    else:
        name2hash, hash2name = {}, {}

    for seqtype in GLOBALS["seqtypes"]:
        log.log(28, "Loading %d %s sequences..." %(len(name2seq[seqtype]), seqtype))
        db.add_seq_table([(name2hash.get(k, k), seq) for k,seq in
                          name2seq[seqtype].iteritems()], seqtype)
    db.seqconn.commit()

def scan_sequences(args, target_seqs):
    visited_seqs = {"aa":[], "nt":[]}
    seq2length = {"aa":{}, "nt":{}}
    seq2unknown = {"aa":{}, "nt":{}}
    seq2seq = {"aa":{}, "nt":{}}
    skipped_seqs = 0
    for seqtype in ["aa", "nt"]:
        seqfile = getattr(args, "%s_seed_file" %seqtype)
        if not seqfile:
            continue
        GLOBALS["seqtypes"].add(seqtype)
        log.log(28, "Scanning %s sequence file...", seqtype)
        fix_dups = True if args.rename_dup_seqnames else False
        SEQS = SeqGroup(seqfile, fix_duplicates=fix_dups, format=args.seqformat)
        for c1, (seqid, seq) in enumerate(SEQS.id2seq.iteritems()):
            if c1%10000 == 0:
                print >>sys.stderr, c1, "\r",
                sys.stderr.flush()

            seqname = SEQS.id2name[seqid]
            if target_seqs and seqname not in target_seqs:
                skipped_seqs += 1
                continue
            visited_seqs[seqtype].append(seqname)

            # Clear problematic symbols
            if not args.no_seq_checks:
                seq = seq.replace(".", "-")
                seq = seq.replace("*", "X")
                if seqtype == "aa":
                    seq = seq.upper()
                    seq = seq.replace("J", "X") # phyml fails with J
                    seq = seq.replace("O", "X") # mafft fails with O
                    seq = seq.replace("U", "X") # selenocysteines
            if args.dealign:
                seq = seq.replace("-", "").replace(".", "")
            seq2seq[seqtype][seqname] = seq
            seq2length[seqtype][seqname] = len(seq)
            if not args.no_seq_checks:
                # Load unknown symbol inconsistencies
                if seqtype == "nt" and set(seq) - NT:
                    seq2unknown[seqtype][seqname] = set(seq) - NT
                elif seqtype == "aa" and set(seq) - AA:
                    seq2unknown[seqtype][seqname] = set(seq) - AA

        # Initialize target sets using aa as source
        if not target_seqs: # and seqtype == "aa":
            target_seqs = set(visited_seqs["aa"])

    if skipped_seqs:
        log.warning("%d sequences will not be used since they are"
                    "  not present in the aa seed file." %skipped_seqs)
                             
    return target_seqs, visited_seqs, seq2length, seq2unknown, seq2seq

def check_seq_integrity(args, target_seqs, visited_seqs, seq2length, seq2unknown, seq2seq):
    log.log(28, "Checking data consistency ...")
    source_seqtype = "aa" if "aa" in GLOBALS["seqtypes"] else "nt"
    error = ""

    # Check for duplicate ids
    if not args.ignore_dup_seqnames:
        seq_number = len(set(visited_seqs[source_seqtype]))
        if len(visited_seqs[source_seqtype]) != seq_number:
            counter = defaultdict(int)
            for seqname in visited_seqs[source_seqtype]:
                counter[seqname] += 1
            duplicates = ["%s\thas %d copies" %(key, value) for key, value in counter.iteritems() if value > 1]
            error += "\nDuplicate sequence names.\n"
            error += '\n'.join(duplicates)

    # check that the seq of all targets is available
    if target_seqs: 
        for seqtype in GLOBALS["seqtypes"]:
            missing_seq = target_seqs - set(seq2seq[seqtype].keys())
            if missing_seq:
                error += "\nThe following %s sequences are missing:\n" %seqtype
                error += '\n'.join(missing_seq)

    # check for unknown characters
    for seqtype in GLOBALS["seqtypes"]:
        if seq2unknown[seqtype]:
            error += "\nThe following %s sequences contain unknown symbols:\n" %seqtype
            error += '\n'.join(["%s\tcontains:\t%s" %(k,' '.join(v)) for k,v in seq2unknown[seqtype].iteritems()] )

    # check for aa/cds consistency
    if GLOBALS["seqtypes"] == set(["aa", "nt"]):
        inconsistent_cds = set()
        for seqname, ntlen in seq2length["nt"].iteritems():
            if seqname in seq2length["aa"]:
                aa_len = seq2length["aa"][seqname]
                if ntlen / 3.0 != aa_len:
                    inconsistent_cds.add("%s\tExpected:%d\tFound:%d" %\
                                         (seqname,
                                         aa_len*3,
                                         ntlen))
        if inconsistent_cds:
            error += "\nUnexpected coding sequence length for the following ids:\n"
            error += '\n'.join(inconsistent_cds)

    # Show some stats
    all_len = seq2length[source_seqtype].values()
    max_len = numpy.max(all_len)
    min_len = numpy.min(all_len)
    mean_len = numpy.mean(all_len)
    std_len = numpy.std(all_len)
    outliers = []
    for v in all_len:
        if abs(mean_len - v) >  (3 * std_len):
            outliers.append(v)
    log.log(28, "Total sequences:  %d" %len(all_len))
    log.log(28, "Average sequence length: %d +- %0.1f " %(mean_len, std_len))
    log.log(28, "Max sequence length:  %d" %max_len)
    log.log(28, "Min sequence length:  %d" %min_len)

    if outliers:
        log.warning("%d sequence lengths look like outliers" %len(outliers))

    return error

def hash_names(target_names):
    """Given a set of strings of variable lengths, it returns their
    conversion to fixed and safe hash-strings.
    """
    # An example of hash name collision
    #test= ['4558_15418', '9600_21104', '7222_13002', '3847_37647', '412133_16266']
    #hash_names(test)

    log.log(28, "Generating safe sequence names...")
    hash2name = defaultdict(list)
    for c1, name in enumerate(target_names):
        print >>sys.stderr, c1, "\r",
        sys.stderr.flush()
        hash_name = encode_seqname(name)
        hash2name[hash_name].append(name)

    collisions = [(k,v) for k,v in hash2name.iteritems() if len(v)>1]
    #GLOBALS["name_collisions"] = {}
    if collisions:
        visited = set(hash2name.keys())
        for old_hash, coliding_names in collisions:
            logindent(2)
            log.log(20, "Collision found when hash-encoding the following gene names: %s", coliding_names)
            niter = 1
            valid = False
            while not valid or len(new_hashes) < len(coliding_names):
                niter += 1
                new_hashes = defaultdict(list)
                for name in coliding_names:
                    hash_name = encode_seqname(name*niter)
                    new_hashes[hash_name].append(name)
                valid = set(new_hashes.keys()).isdisjoint(visited)
                
            log.log(20, "Fixed with %d concatenations! %s", niter, ', '.join(['%s=%s' %(e[1][0], e[0]) for e in  new_hashes.iteritems()]))
            del hash2name[old_hash]
            hash2name.update(new_hashes)
            #GLOBALS["name_collisions"].update([(_name, _code) for _code, _name in new_hashes.iteritems()])
            logindent(-2)
    #collisions = [(k,v) for k,v in hash2name.iteritems() if len(v)>1]
    #log.log(28, "Final collisions %s", collisions )
    hash2name = dict([(k, v[0]) for  k,v in hash2name.iteritems()])
    name2hash = dict([(v, k) for  k,v in hash2name.iteritems()])
    return name2hash, hash2name


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "check":
        APPSPATH =  os.path.join(NPRPATH, "ext_apps/")
        # setup portable apps
        config = {}
        for k in apps.builtin_apps:
            cmd = apps.get_call(k, APPSPATH, "/tmp", "1")
            print cmd
            config[k] = cmd
        apps.test_apps(config)
        sys.exit(0)
    elif len(sys.argv) > 1 and sys.argv[1] == "version":
        print __DESCRIPTION__
        sys.exit(0)
    
    parser = argparse.ArgumentParser(description=__DESCRIPTION__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    # Input data related flags
    input_group = parser.add_argument_group('==== Input Options ====')
    
    input_group.add_argument("-w", dest="workflow",
                             required=True,
                             choices=["supermatrix", "genetree"],
                             help="Type of phylogenetic workflow.")

    input_group.add_argument("-c", "--config", dest="configfile",
                             type=str, required=True, nargs="+",
                             help="Configuration file.")

    input_group.add_argument("-a", dest="aa_seed_file",
                             type=existing_file,
                             help="Initial multi sequence file with"
                             " protein sequences.")
    
    input_group.add_argument("--seqformat", dest="seqformat",
                             choices=["fasta", "phylip", "iphylip", "phylip_relaxed", "iphylip_relaxed"],
                             default="fasta",
                             help="")
    
    input_group.add_argument("-n", dest="nt_seed_file",
                             type=existing_file,
                             help="Initial multi sequence file with"
                             " nucleotide sequences")

    input_group.add_argument("--dealign", dest="dealign",
                             action="store_true",
                             help="when used, gaps in the orginal fasta file will"
                             " be removed, thus allowing to use alignment files as input.")
    
    input_group.add_argument("--no-seq-rename", dest="seq_rename",
                             action="store_false",
                             help="If used, sequence names will NOT be"
                             " internally translated to 10-character-"
                             "identifiers.")

    input_group.add_argument("--no-seq-checks", dest="no_seq_checks",
                            action="store_true",
                            help="Skip consistency sequence checks for not allowed symbols, etc.")
    
    dup_names_group = input_group.add_mutually_exclusive_group()
    
    dup_names_group.add_argument("--ignore-dup-seqnames", dest="ignore_dup_seqnames",
                                 action = "store_true",
                                 help=("If duplicated sequence names exist in the input"
                                       " fasta file, a single random instance will be used."))
    
    dup_names_group.add_argument("--rename-dup-seqnames", dest="rename_dup_seqnames",
                                 action = "store_true",
                                 help=("If duplicated sequence names exist in the input"
                                       " fasta file, duplicates will be renamed."))
    
    input_group.add_argument("--first-split-outgroup", dest="first_split",
                             type=str,
                             help=("When used, it overrides first_split option"
                                   " in any tree merger config block in the"
                                   " config file."))
    
    input_group.add_argument("--orthodb", dest="orthodb",
                             type=str,
                             help="Uses a custom orthology-pair database file")
    
    input_group.add_argument("--seqdb", dest="seqdb",
                             type=str,
                             help="Uses a custom sequence database file")
    
    # supermatrix workflow
    
    input_group.add_argument("--ortho-pairs", dest="ortho_pairs",
                             type=existing_file,
                             help="File containing all one2one orthologous"
                             " relationships among the species of interest.")
    
    input_group.add_argument("--cogs", dest="cogs_file",
                             type=existing_file,
                             help="A file defining clusters of orthologous groups. One per line. Tab delimited sequence ids. ")

    input_group.add_argument("--lineages", dest="lineages_file",
                             type=existing_file,
                             help="A file containing the (sorted) lineage "
                                  "track of each species. It enables "
                                  "NPR algorithm to fix what taxonomic "
                                  "levels should be optimized."
                                  "Note that linage tracks must consist in "
                                  "a comma separated list of taxonomic levels "
                                  "sorted from deeper to swallower clades "
                                  "(i.e. 9606 [TAB] Eukaryotes,Mammals,Primates)"
                             )
    
    input_group.add_argument("--spname-delimiter", dest="spname_delimiter",
                             type=str, default="_",
                             help="In supermatrix mode, spname_delimiter is used to split"
                             " the name of sequences into species code and"
                             " sequence identifier (i.e. HUMAN_p53 = HUMAN, p53)."
                             " Note that species name must always precede seq.identifier.")

    input_group.add_argument("--spfile", dest="spfile",
                             type=existing_file,
                             help="If specified, only the sequences and ortholog"
                             " pairs matching the group of species in this file"
                             " (one species code per line) will be used. ")
    
    
    # Output data related flags
    output_group = parser.add_argument_group('==== Output Options ====')
    output_group.add_argument("-o", "--outdir", dest="outdir",
                              type=str, required=True,
                              help="""Output directory for results.""")
    
    output_group.add_argument("--scratch_dbdir", dest="scratch_dbdir",
                              type=existing_dir, 
                              help="""If provided, sqlite files will be created in the provided scratch path. Files will be moved to outpath when finished.""")

    output_group.add_argument("--scratch_dir", dest="scratch_dir",
                              type=existing_dir, 
                              help="""If provided, npr will run on the scratch folder and all files will be transferred to the output dir when finished. """)
    
    output_group.add_argument("--taskdir", dest="taskdir",
                              type=existing_dir,
                              help="""Output directory for tasks related data""")
    
    output_group.add_argument("--compress", action="store_true",
                              help="Compress intermediate files when"
                              " a task is finished.")
    
    output_group.add_argument("--logfile", action="store_true",
                              help="Log messages are saved into a file")
    
    output_group.add_argument("--email", dest="email",
                              type=str, 
                              help="Send email info when errors or finished threads")
    
    output_group.add_argument("--email_report_time", dest="email_report_time",
                              type=int, default = 0, 
                              help="Send email reports while execution")
    
    
    # Task execution related flags
    exec_group = parser.add_argument_group('==== Execution Mode Options ====')

    exec_group.add_argument("-r", "--retry_error_jobs", dest="retry_error_jobs",
                            action="store_true",
                            help="Try to relaunch jobs marked as error.")
    
    exec_group.add_argument("-m", "--maxcores", dest="maxcores", type=int,
                            default=1, help="Maximum number of CPU cores"
                            " available in the execution host. If higher"
                            " than 1, tasks with multi-threading"
                            " capabilities will enabled.")

    exec_group.add_argument("-t", "--schedule_time", dest="schedule_time",
                            type=float, default=2,
                            help="""How often tasks should be checked""")
    
    exec_group.add_argument("--launch_time", dest="launch_time",
                            type=float, default=5,
                            help="""How often queued jobs should be launched""")
    
    exec_type_group = exec_group.add_mutually_exclusive_group()
    exec_type_group.add_argument("-x", "--insitu_execution", dest="execute",
                                 action="store_true",
                                 help="Pipeline jobs are launched in the same machine as the"
                                 " as ETE-NPR is running.")
    
    exec_type_group.add_argument("--sge", dest="sge_execute",
                                 action="store_true", help="EXPERIMENTAL!: Jobs will be"
                                 " launched using the Sun Grid Engine"
                                 " queue system.")

    exec_group.add_argument("--monitor", dest="monitor",
                            action="store_true",
                            help="Pipeline jobs will be"
                            " detached from the main NPR process. This means that"
                            " when npr execution is interrupted, all currently"
                            " running jobs will keep running. Use this option if you"
                            " want to stop and recover an NPR execution thread or"
                            " if jobs are expected to be executed remotely."
                            )

    exec_group.add_argument("--override", dest="override",
                            action="store_true",
                            help="Override workflow configuration if necessary." )

    exec_group.add_argument("--clearall", dest="clearall",
                            action="store_true",
                            help="Erase all previous data if necessary.")
    
    exec_group.add_argument("--softclear", dest="softclear",
                            action="store_true",
                            help="Clear precomputed data (data.db), but keeps task raw data (tasks/).")
    
    exec_group.add_argument("--clear_orthodb", dest="clearorthology",
                            action="store_true",
                            help="DEPRECATED: Override orthology pairs table in database.")

    exec_group.add_argument("--clear_seqdb", dest="clearseqs",
                            action="store_true",
                            help="Reload sequences deleting previous database if necessary.")

    exec_group.add_argument("--arch", dest="arch",
                            choices=["auto", "32", "64"],
                            default="auto", help="Set the architecture of"
                            " execution hosts (needed only when using"
                            " built-in applications.)")
    
    exec_group.add_argument("--nochecks", dest="nochecks",
                            action="store_true",
                            help="Skip application checks.")
    
    # Interface related flags
    ui_group = parser.add_argument_group("==== Program Interface Options ====")
    ui_group.add_argument("-u", dest="enable_ui",
                        action="store_true", help="When used, a color"
                        " based interface is launched to monitor NPR"
                        " processes. This feature is EXPERIMENTAL and"
                        " requires NCURSES libraries installed in your"
                        " system.")

    ui_group.add_argument("-v", dest="verbosity",
                        default = 0, type=int, choices=[0,1,2,3,4],
                        help="Verbosity level: 0=very quiet, 4=very "
                          " verbose.")

    ui_group.add_argument("--debug", nargs="?",
                          const="all",
                          help="Start debugging"
                          " A taskid can be provided, so"
                          " debugging will start from such task on.")
    
    args = parser.parse_args()


    
    if not args.aa_seed_file and not args.nt_seed_file:
        parser.error('At least one input file argument (-a, -n) is required')

    outdir = os.path.abspath(args.outdir)
    final_dir, runpath = os.path.split(outdir)
    if not runpath:
        raise ValueError("Invalid outdir")

    GLOBALS["output_dir"] = os.path.abspath(args.outdir)
    
    if args.scratch_dir:
        # set paths for scratch folder for sqlite files 
        print >>sys.stderr, "Creating temporary scratch dir..."
        base_scratch_dir = os.path.abspath(args.scratch_dir)        
        scratch_dir = tempfile.mkdtemp(prefix='npr_tmp', dir=base_scratch_dir)
        GLOBALS["scratch_dir"] = scratch_dir
        GLOBALS["basedir"] = scratch_dir
    elif args.scratch_dbdir:
        # set paths for scratch folder for sqlite files 
        print >>sys.stderr, "Creating temporary scratch dir for sqlite files..."
        base_dbdir = os.path.abspath(args.scratch_dbdir)        
        dbdir = tempfile.mkdtemp(prefix='npr_tmp', dir=base_dbdir)
        GLOBALS["dbdir"] = dbdir
        GLOBALS["basedir"] = GLOBALS["output_dir"]
    else:
        GLOBALS["basedir"] = GLOBALS["output_dir"]
        
    if args.taskdir:
        GLOBALS["taskdir"] = os.path.realpath(args.taskdir)
    else:
        GLOBALS["taskdir"] = os.path.join(GLOBALS["basedir"], "tasks")
        
    if args.first_split:
        GLOBALS["first_split_outgroup"] = args.first_split

    GLOBALS["email"] = args.email
    GLOBALS["email_report_time"] = args.email_report_time
    GLOBALS["launch_time"] = args.launch_time
    GLOBALS["cmdline"] = ' '.join(sys.argv)
    GLOBALS["nodeinfo"] = defaultdict(dict)
    GLOBALS["threadinfo"] = defaultdict(dict)
    GLOBALS["seqtypes"] = set()
    GLOBALS["target_species"] = set()
    GLOBALS["target_sequences"] = set()
    GLOBALS["spname_delimiter"] = args.spname_delimiter
    GLOBALS["color_shell"] = True
    GLOBALS["citator"] = Citator()

    GLOBALS["retry_error_jobs"] = args.retry_error_jobs
    GLOBALS["retried_jobs"] = set()
    
    GLOBALS["lineages"] = None
    GLOBALS["optimized_levels"] = None
    GLOBALS["cogs_file"] = None 
    
    GLOBALS["citator"].add(ETE_CITE)
    
    if not pexist(GLOBALS["basedir"]):
        os.makedirs(GLOBALS["basedir"])

    # Start the application
    app_wrapper(main, args)
